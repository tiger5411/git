#!/bin/sh

die () {
	echo "$@" >&2
	exit 1
}

command_list () {
	eval "grep -ve '^#' $exclude_programs" <"$1"
}

get_category_line () {
	tr ' ' '\012' |
	LC_ALL=C sort -u
}

category_list () {
	grep -v '^#' "$1" |
	cut -c 40- |
	tr ' ' '\012' |
	grep -v '^$' |
	LC_ALL=C sort -u
}

get_synopsis () {
	head -n 10 "Documentation/$1.txt" |
	sed -n '
		/^NAME/,/'"$1"'/H
		${
			x
			s/.*'"$1"' - \(.*\)/N_("\1")/
			p
		}'
}

define_categories () {
	echo
	echo "/* Command categories */"
	bit=0
	category_list "$1" |
	while read cat
	do
		echo "#define CAT_$cat (1UL << $bit)"
		bit=$(($bit+1))
	done
	test "$bit" -gt 32 && die "Urgh.. too many categories?"
}

define_category_names () {
	echo
	echo "/* Category names */"
	echo "static const char *category_names[] = {"
	bit=0
	category_list "$1" |
	while read cat
	do
		echo "	\"$cat\", /* (1UL << $bit) */"
		bit=$(($bit+1))
	done
	echo "	NULL"
	echo "};"
}

print_command_list () {
	while read cmd rest
	do
		printf "	{ \"$cmd\", $(get_synopsis $cmd), 0"
		printf " | CAT_%s" $(echo "$rest" | get_category_line)
		echo " },"
	done
}

exclude_programs=
while test "--exclude-program" = "$1"
do
	shift
	exclude_programs="$exclude_programs -e \"^$1 \""
	shift
done

header_only=
case $1 in
--entry-only)
	shift
	print_command_list $1 <"$1"
	exit 0
	;;
--header-only)
	shift
	header_only=t
	;;
esac

echo "/* Automatically generated by generate-cmdlist.sh */
struct cmdname_help {
	const char *name;
	const char *help;
	uint32_t category;
};
"
define_categories "$1"
echo
define_category_names "$1"
echo

if test -n "$header_only"
then
	exit 0
fi

# The old compatibility mode for CMmake. See 061c2240b1b (Introduce
# CMake support for configuring Git, 2020-06-12)
echo "static struct cmdname_help command_list[] = {"
grep -v \
	-e '^#' \
	-e '^git-fsck-objects ' \
	"$1" |
print_command_list "$1"
echo "};"
