#!/bin/sh

die () {
	echo "$@" >&2
	exit 1
}

get_synopsis () {
	sed -n '
		/^NAME/,/'"$1"'/H
		${
			x
			s/.*'"$1"' - \(.*\)/N_("\1")/
			p
		}' "Documentation/$1.txt"
}

define_categories () {
	format=$1
	shift

	seen=":"
	bit=0
	in_list=
	while read cmd cats
	do
		if test -z "$cmd$cats"
		then
			in_list=t
			continue
		elif test -z "$in_list"
		then
			continue
		fi
		
		for cat in $(printf " %s " $cats)
		do
			case "$seen" in
			*":$cat:"*)
				continue;
				;;
			*)
				printf "$format" "$cat" "$bit"
				bit=$(($bit+1))
				seen="$seen:$cat:"
				;;
			esac
		done

	done <"$1"
	test "$bit" -gt 32 && die "Urgh.. too many categories?"
}

print_command_list () {
	echo "static struct cmdname_help command_list[] = {"

	in_list=
	while read cmd cats
	do
		if test -z "$cmd$cats"
		then
			in_list=t
			continue
		elif test -z "$in_list"
		then
			continue
		fi

		printf "	{ \"$cmd\", $(get_synopsis $cmd), 0"
		printf " | CAT_%s" $cats
		echo " },"
	done <"$1"
	echo "};"
}

exclude_programs=
while test "--exclude-program" = "$1"
do
	shift
	exclude_programs="$exclude_programs -e \"^$1 \""
	shift
done

echo "/* Automatically generated by generate-cmdlist.sh */
struct cmdname_help {
	const char *name;
	const char *help;
	uint32_t category;
};


/* Command categories */
"
define_categories "#define CAT_%s (1UL << %s)\n" "$1"
echo
echo "/* Category names */"
echo "static const char *category_names[] = {"
define_categories "\t\"%s\", /* (1UL << %s) */\n" "$1"
echo "	NULL"
echo "};"

echo
print_command_list "$1"
