include .build/probe/compiler.mak
include .build/probe/config-mak-dev.mak

ifeq ($(PROBE_COMPILER_name),xlc)
COMPILER_name_IS_xlc = 1
endif

ifeq ($(filter no-error,$(DEVOPTS)),)
ifdef COMPILER_name_IS_xlc
DEVELOPER_CFLAGS += -qhalt=i
else
DEVELOPER_CFLAGS += -Werror
endif
SPARSE_FLAGS += -Wsparse-error
endif

ifndef COMPILER_name_IS_xlc
DEVELOPER_CFLAGS += -Wall
endif

ifeq ($(filter no-pedantic,$(DEVOPTS)),)
DEVELOPER_CFLAGS += -pedantic
ifdef PROBE_COMPILER_HAS_Wpedantic
DEVELOPER_CFLAGS += -Wpedantic
ifdef PROBE_COMPILER_HAS_Wno-pedantic-ms-format
ifeq ($(uname_S),MINGW)
DEVELOPER_CFLAGS += -Wno-pedantic-ms-format
endif
endif
endif
ifdef COMPILER_name_IS_xlc
$(error under xlc DEVELOPER=1 must use DEVOPTS=no-pedantic)
endif
endif

ifneq ($(uname_S),FreeBSD)
ifdef PROBE_COMPILER_NEEDS_std-eq-gnu99
DEVELOPER_CFLAGS += -std=gnu99
else
ifdef COMPILER_name_IS_xlc
DEVELOPER_CFLAGS += -qlanglvl=stdc99
endif
endif
else
# FreeBSD cannot limit to C99 because its system headers unconditionally
# rely on C11 features.
endif

ifndef COMPILER_name_IS_xlc
DEVELOPER_CFLAGS += -Wdeclaration-after-statement
DEVELOPER_CFLAGS += -Wformat-security
DEVELOPER_CFLAGS += -Wold-style-definition
DEVELOPER_CFLAGS += -Woverflow
DEVELOPER_CFLAGS += -Wpointer-arith
DEVELOPER_CFLAGS += -Wstrict-prototypes
DEVELOPER_CFLAGS += -Wunused
DEVELOPER_CFLAGS += -Wvla
DEVELOPER_CFLAGS += -fno-common
endif

ifdef PROBE_COMPILER_HAS_Wtautological-constant-out-of-range-compare
DEVELOPER_CFLAGS += -Wtautological-constant-out-of-range-compare
endif

ifdef PROBE_COMPILER_HAS_Wextra
DEVELOPER_CFLAGS += -Wextra
# if a function is public, there should be a prototype and the right
# header file should be included. If not, it should be static.
DEVELOPER_CFLAGS += -Wmissing-prototypes
ifeq ($(filter extra-all,$(DEVOPTS)),)
# These are disabled because we have these all over the place.
DEVELOPER_CFLAGS += -Wno-empty-body
DEVELOPER_CFLAGS += -Wno-missing-field-initializers
DEVELOPER_CFLAGS += -Wno-sign-compare
DEVELOPER_CFLAGS += -Wno-unused-parameter
endif
endif

# uninitialized warnings on gcc 4.9.2 in xdiff/xdiffi.c and config.c
# not worth fixing since newer compilers correctly stop complaining
ifdef PROBE_COMPILER_NEEDS_Wno-uninitialized
DEVELOPER_CFLAGS += -Wno-uninitialized
endif

GIT_TEST_PERL_FATAL_WARNINGS = YesPlease

# GCC's -fanalyzer mode. See also
# https://developers.redhat.com/articles/2022/04/12/state-static-analysis-gcc-12-compiler
ifneq ($(filter gcc10,$(COMPILER_FEATURES)),)
ifeq ($(filter analyzer,$(DEVOPTS)),analyzer)
DEVELOPER_CFLAGS += -fanalyzer

## -fanalyzer exists exists as of gcc10, but versions older than gcc12
## have a lot of false positives.
ifeq ($(filter gcc12,$(COMPILER_FEATURES)),)
DEVELOPER_CFLAGS += -Wno-analyzer-double-free
DEVELOPER_CFLAGS += -Wno-analyzer-free-of-non-heap
endif

## Helper templates to whitelist existing issues
define fn_disable_analyzer_tmpl
$(1).sp $(1).s $(1).o: EXTRA_CPPFLAGS += $(2)

endef

define fn_disable_analyzer
$(foreach f,$(2),$(call fn_disable_analyzer_tmpl,$(f),$(1)))
endef

## -Wno-error=analyzer-null-dereference
$(eval $(call fn_disable_analyzer, \
	-Wno-error=analyzer-null-dereference, \
	add-patch \
	blame \
	diff-lib \
	dir \
	gpg-interface \
	graph \
	range-diff \
	ref-filter \
	refs/packed-backend \
	remote \
	strbuf \
	unpack-trees \
	utf8 \
))
## -Wno-error=analyzer-null-dereference: pre-gcc12
ifeq ($(filter gcc12,$(COMPILER_FEATURES)),)
$(eval $(call fn_disable_analyzer, \
	-Wno-error=analyzer-null-dereference, \
	merge \
	builtin/name-rev \
))
endif
## -Wno-error=analyzer-null-argument
$(eval $(call fn_disable_analyzer, \
	-Wno-error=analyzer-null-argument, \
	builtin/pull \
	pack-write \
))
## -Wno-error=analyzer-use-of-uninitialized-value: post-gcc12
ifneq ($(filter gcc12,$(COMPILER_FEATURES)),)
$(eval $(call fn_disable_analyzer, \
	-Wno-error=analyzer-use-of-uninitialized-value, \
	builtin/merge-file \
))
endif
## -Wno-error=analyzer-malloc-leak
$(eval $(call fn_disable_analyzer, \
	-Wno-error=analyzer-malloc-leak, \
	fsmonitor-settings \
))

endif
endif
