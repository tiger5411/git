git-hook(1)
===========

NAME
----
git-hook - run git hooks

SYNOPSIS
--------
[verse]
'git hook' run [--to-stdin=<path>] [--ignore-missing] [(-j|--jobs) <n>]
	<hook-name> [-- <hook-args>]

DESCRIPTION
-----------

This command is an interface to git hooks (see linkgit:githooks[5]).
Currently it only provides a convenience wrapper for running hooks for
use by git itself. In the future it might gain other functionality.

This command parses the default configuration files for sections `hook` and
`hookcmd`. `hook` is used to describe the commands which will be run during a
particular hook event; commands are run in the order Git encounters them during
the configuration parse (see linkgit:git-config[1]). `hookcmd` is used to
describe attributes of a specific command. If additional attributes don't need
to be specified, a command to run can be specified directly in the `hook`
section; if a `hookcmd` by that name isn't found, Git will attempt to run the
provided value directly. For example:

Global config
----
  [hook "post-commit"]
    command = "linter"
    command = "~/typocheck.sh"

  [hookcmd "linter"]
    command = "/bin/linter --c"
----

Local config
----
  [hook "prepare-commit-msg"]
    command = "linter"
  [hook "post-commit"]
    command = "python ~/run-test-suite.py"
----

With these configs, you'd then run post-commit hooks in this order:

  /bin/linter --c
  ~/typocheck.sh
  python ~/run-test-suite.py
  .git/hooks/post-commit (if present)

and prepare-commit-msg hooks in this order:

  /bin/linter --c
  .git/hooks/prepare-commit-msg (if present)

In general, when instructions suggest adding a script to
`.git/hooks/<something>`, you can specify it in the config instead by running
`git config --add hook.<something>.command <path-to-script>` - this way you can
share the script between multiple repos. That is, `cp ~/my-script.sh
~/project/.git/hooks/pre-commit` would become `git config --add
hook.pre-commit.command ~/my-script.sh`.

SUBCOMMANDS
-----------

run::
	Runs hooks configured for `<hook-name>`, in the order they are
	discovered during the config parse.
+
Any positional arguments to the hook should be passed after an
optional `--` (or `--end-of-options`, see linkgit:gitcli[7]). The
arguments (if any) differ by hook name, see linkgit:githooks[5] for
what those are.

OPTIONS
-------

--to-stdin::
	For "run"; Specify a file which will be streamed into the
	hook's stdin. The hook will receive the entire file from
	beginning to EOF.

--ignore-missing::
	Ignore any missing hook by quietly returning zero. Used for
	tools that want to do a blind one-shot run of a hook that may
	or may not be present.

-j::
--jobs::
	Only valid for `run`.
+
Specify how many hooks to run simultaneously. If this flag is not specified, use
the value of the `hook.jobs` config. If the config is not specified, use the
number of CPUs on the current system. Some hooks may be ineligible for
parallelization: for example, 'commit-msg' intends hooks modify the commit
message body and cannot be parallelized.

CONFIGURATION
-------------
include::config/hook.txt[]

SEE ALSO
--------
linkgit:githooks[5]

GIT
---
Part of the linkgit:git[1] suite
